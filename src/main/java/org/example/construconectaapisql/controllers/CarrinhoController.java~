package org.example.construconectaapisql.controllers;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.example.construconectaapisql.model.Carrinho;
import org.example.construconectaapisql.model.Usuario;
import org.example.construconectaapisql.service.CarrinhoService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Validator;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/shopping-cart")
public class CarrinhoController {

    private CarrinhoService carrinhoService;
    private final Validator validator;

    @Autowired
    public CarrinhoController(CarrinhoService carrinhoService, Validator validator) {
        this.carrinhoService = carrinhoService;
        this.validator = validator;
    }

    @GetMapping("/shopping-carts")
    @Operation(summary = "Show all shopping carts", description = "Returns a list of all available shopping carts")
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "Successful operation",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = Carrinho.class))),
            @ApiResponse(responseCode = "500", description = "Internal server error",
                    content = @Content(mediaType = "text/plain"))
    })
    public List<Carrinho> findAllShoppingCarts() { return carrinhoService.findAllShoppingCarts(); }

    @PostMapping("/add")
    @Operation(summary = "Add a new shopping cart", description = "Creates a new shopping cart and saves it to the database")
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "Shopping Cart created successfully",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = Usuario.class))),
            @ApiResponse(responseCode = "400", description = "Validation error or shopping cart already exists",
                    content = @Content(mediaType = "text/plain")),
            @ApiResponse(responseCode = "409", description = "Data integrity violation",
                    content = @Content(mediaType = "text/plain")),
            @ApiResponse(responseCode = "500", description = "Internal server error",
                    content = @Content(mediaType = "text/plain"))
    })
    public ResponseEntity<?> addShoppingCart(@RequestBody Carrinho carrinho, BindingResult result) {
        if (result.hasErrors()) {
            StringBuilder sb = new StringBuilder("Erros de validação: ");
            result.getAllErrors().forEach(error -> {
                sb.append(" | ");
                sb.append(error.getDefaultMessage());
            });
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(sb.toString());
        }

        try {
            Carrinho savedShoppingCart = carrinhoService.saveShoppingCart(carrinho);
            if (savedShoppingCart != null) {
                return ResponseEntity.status(HttpStatus.CREATED).body(savedShoppingCart);
            } else {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Carrinho já existe.");
            }
        } catch (DataIntegrityViolationException e) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Erro de integridade de dados: \n" + e.getMessage());
        } catch (DataAccessException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao acessar o banco de dados: \n" + e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao adicionar usuário: \n" + e.getMessage());
        }
    }

    @DeleteMapping("/drop/{carrinhoId}")
    @Operation(summary = "Delete a shopping cart", description = "Deletes the shopping cart with the specified carrinhoId")
    @ApiResponses(value = {
            @ApiResponse(
                    responseCode = "200",
                    description = "Shopping Cart deleted successfully",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = Carrinho.class))),
            @ApiResponse(responseCode = "404", description = "Shopping Cart not found",
                    content = @Content(mediaType = "text/plain")),
            @ApiResponse(responseCode = "500", description = "Internal server error",
                    content = @Content(mediaType = "text/plain"))
    })
    public ResponseEntity<?> dropShoppingCartById ( @PathVariable Long carrinhoId ) {
        carrinhoService.deleteShoppingCart(carrinhoId);
        return ResponseEntity.ok("Carrinho de compras excluído com sucesso");
    }


}
